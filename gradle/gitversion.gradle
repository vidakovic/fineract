/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// this sets the variable "branch" with the current branch; sometimes useful e. g. if you want to have different version schemes depending on the branch (develop=x.y.z-SNAPSHOT, master=x.y.z)
def branch = ''
try {
    def proc = 'git rev-parse --abbrev-ref HEAD'.execute()
    def sout = new StringBuffer()
    def serr = new StringBuffer()
    proc.waitForProcessOutput(sout, serr)
    logger.info(sout.toString())
} catch(all) {
    // ignore
}

// make sure git is available
if (branch!='') {
    apply plugin: 'fr.brouillard.oss.gradle.jgitver'

    jgitver {
        strategy 'PATTERN'
        // TODO: @vidakovic see if we need to do anything here (when publishing Docker images to AWS ECR we can't overwrite and therefor need to add Git hashes to make the version in develop unique)
        // versionPattern "master".equals(System.getProperty("branch")) ? '${v}' : '${M}.${m}.${p}-${meta.GIT_SHA1_8}'
        versionPattern '${M}.${m}.${p}'
    }
} else {
    task versionFineract() {
        logger.warn("Version: $version")
    }
    logger.warn('Git not available.')
}
