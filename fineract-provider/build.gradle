/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'openjpa'
apply plugin: 'distribution'

apply from: 'dependencies.gradle'
/* TODO https://issues.apache.org/jira/browse/FINERACT-939 (dev-dependencies.gradle has been removed, as totally broken)
 // Pick up dependencies based on the environment, defaults to production
 if (project.hasProperty('env') && project.getProperty('env') == 'dev') {
 apply from:  'dev-dependencies.gradle'
 }  else {
 apply from: 'dependencies.gradle'
 }
 */

apply from: "$rootDir/gradle/cargo.gradle"

apply from: "$rootDir/gradle/openjpa.gradle"

apply from: "$rootDir/gradle/swagger.gradle"

configurations {
    providedRuntime // needed for Spring Boot executable WAR
    providedCompile
    compile() {
        exclude module: 'hibernate-entitymanager'
        exclude module: 'hibernate-validator'
        exclude module: 'activation'
        exclude module: 'bcmail-jdk14'
        exclude module: 'bcprov-jdk14'
        exclude module: 'bctsp-jdk14'
        exclude module: 'c3p0'
        exclude module: 'stax-api'
        exclude module: 'jaxb-api'
        exclude module: 'jaxb-impl'
        exclude module: 'jboss-logging'
        exclude module: 'itext-rtf'
        exclude module: 'classworlds'
    }
    runtime
    all*.exclude module: 'jul-to-slf4j' // see FINERACT-700 re. ClassCircularityError: java/util/logging/LogRecord
}

/* Enable Oauth2 authentication based on environment, default to HTTP basic auth */
if (project.hasProperty('security') && project.getProperty('security') == 'oauth') {
    if(project.hasProperty('twofactor') && project.getProperty('twofactor') == 'enabled') {
        copy {
            from './properties/oauth/twofactor/'
            into 'src/main/resources/'
            include '*.properties'
        }
    } else {
        copy {
            from './properties/oauth/'
            into 'src/main/resources/'
            include '*.properties'
        }
    }
}  else {
    if(project.hasProperty('twofactor') && project.getProperty('twofactor') == 'enabled') {
        copy {
            from './properties/basicauth/twofactor/'
            into 'src/main/resources/'
            include '*.properties'
        }
    } else {
        copy {
            from './properties/basicauth/'
            into 'src/main/resources/'
            include '*.properties'
        }
    }
}

war {
    from("$rootDir/licenses/binary/") {
        // notice the parens
        into "WEB-INF/licenses/binary/" // no leading slash
    }
    from("$rootDir/LICENSE_RELEASE") {
        // notice the parens
        into "WEB-INF/" // no leading slash
    }
    from("$rootDir/NOTICE_RELEASE") {
        // notice the parens
        into "WEB-INF/" // no leading slash
    }
    rename ('LICENSE_RELEASE', 'LICENSE')
    rename ('NOTICE_RELEASE', 'NOTICE')

    from("$rootDir/DISCLAIMER") {
        // notice the parens
        into "WEB-INF/" // no leading slash
    }
    war.finalizedBy(bootWar)
}

/* Exclude maria db related files for non dev builds */
if (!(project.hasProperty('env') && project.getProperty('env') == 'dev')) {
    sourceSets {
        main {
            java {
                exclude '**/ServerWithMariaDB*'
                exclude '**/MariaDB4j*'
            }
        }
        test {
            java {
                exclude '**/core/boot/tests/**'
            }
        }
    }
}

task integrationTest(type:Test) {
    description = "Run integration tests (located in src/integrationTest/java). Starts Tomcat in daemon mode before executing the tests (and stops it after)."
    dependsOn cargoStartLocal
    finalizedBy cargoStopLocal

    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = project.sourceSets.integrationTest.runtimeClasspath
}

integrationTest {
    useJUnitPlatform()
    testLogging {
        // FINERACT-927
        events "skipped", "failed"
        showStandardStreams = false
        exceptionFormat "full"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        // FINERACT-927
        events "skipped", "failed"
        showStandardStreams = false
        exceptionFormat "full"
    }
}

springBoot {
    mainClassName = 'org.apache.fineract.ServerApplication'
}

bootWar {
    mainClassName = 'org.apache.fineract.ServerApplication'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Tar) {
    compression Compression.GZIP
    extension 'tar.gz'
}

task copySwagger(type: Copy) {
    from file("$buildDir/classes/java/main/static/swagger-ui/fineract.yaml")
    into file("$rootDir/fineract-client/config/swagger/")
}

resolve.finalizedBy copySwagger

distributions {
    binary {
        baseName 'apache-fineract-binary'
        contents {
            from bootJar
            from bootWar
            // TODO: @vidakovic include fineract-client in distribution
            // from("$rootDir/build/swagger-code-fineract/build/libs/") {
            //     include '**/*.jar'
            //     rename 'client-(.+)\\.jar', 'fineract-client.jar'
            // }
            from("$rootDir/licenses/binary/") {
                into 'licenses/binary/'
            }
            from "$rootDir/LICENSE_RELEASE"
            from "$rootDir/NOTICE_RELEASE"
            rename ('LICENSE_RELEASE', 'LICENSE')
            rename ('NOTICE_RELEASE', 'NOTICE')

            from "$rootDir/DISCLAIMER"
            from "$rootDir/README.md"
        }
    }
    src {
        baseName 'apache-fineract-src'
        contents {
            from('../') {
                exclude '**/build' , '**/.git', '**/.gradle', '**/.github', '**/.settings', '**/.project', '**/.classpath', '**/.idea', '**/out', '**/bin', '**/._.DS_Store', '**/.DS_Store', '**/WebContent', '**/.externalToolBuilders', '**/.theia', '**/.gitpod.yml', '**/.travis.yml', '**/LICENSE_RELEASE', '**/NOTICE_RELEASE', '**/licenses/binary'
                rename ('LICENSE_SOURCE', 'LICENSE')
                rename ('NOTICE_SOURCE', 'NOTICE')
            }
            from('build/classes/java/main/git.properties') {
                into 'fineract-provider/src/main/resources'
            }
            filter { line -> line.replaceAll('version = \'0\\.0\\.0\'', "version = '$version'".toString()) }
        }
    }
}

tasks.binaryDistTar.setArchiveName("apache-fineract-$version-binary.tar.gz")
tasks.srcDistTar.setArchiveName("apache-fineract-$version-src.tar.gz")

tasks.binaryDistZip.enabled false
tasks.srcDistZip.enabled false
